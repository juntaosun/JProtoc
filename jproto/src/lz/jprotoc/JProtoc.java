package lz.jprotoc;
import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.DescriptorProtos.DescriptorProto;
import com.google.protobuf.DescriptorProtos.FieldDescriptorProto;
import com.google.protobuf.DescriptorProtos.FileDescriptorProto;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse;

import java.util.HashSet;

/**
 * Created with IntelliJ IDEA.
 * User: lizhi
 * Date: 13-8-21
 * Time: 下午12:00
 * To change this template use File | Settings | File Templates.
 */
public class JProtoc {
	private HashSet<String> packs;
	private String header="// Generated by JProtoc(https://github.com/matrix3d/jProtoc)\r\n";
	public void parser(Boolean as3,Boolean js){
		try {
			CodeGeneratorRequest request = CodeGeneratorRequest.parseFrom(System.in);
			CodeGeneratorResponse.Builder builder=CodeGeneratorResponse.newBuilder();
			for(FileDescriptorProto file: request.getProtoFileList()){
				String pack=file.getPackage();
				String packPath=pack.replaceAll("[.]","/")+"/";

				String codefrom="// source: "+"/"+file.getName()+"\r\n";
				String jscode="";
				for(DescriptorProto messageType:file.getMessageTypeList()){
					packs=new HashSet<String>();
					packs.add("lz.jprotoc.Message");
					packs.add("lz.jprotoc.Int64");
					String as3code =header+codefrom+"package "+pack+"{\r\n";
					as3code +="$lzpack";
					as3code +="public class "+messageType.getName()+" extends Message{\r\n\r\n";
					String messageEncode="{";
					String hascode="\r\n";
					for(FieldDescriptorProto field:messageType.getFieldList()){
						if(as3){
							String ftype=getType(field);
							if(field.getLabel().getNumber()==1){
								hascode+="public function get has_"+field.getName()+"():Boolean{return has("+field.getNumber()+");}\r\n";
								as3code +="private var _"+field.getName()+":"+ftype+";\r\n";
								as3code+="public function get "+field.getName()+"():"+ftype+" {return _"+field.getName()+";}\r\n";
								as3code+="public function set "+field.getName()+"(value:"+ftype+"):void { _"+field.getName()+" = value; setHas("+field.getNumber()+"); }\r\n\r\n";
							}else{
								as3code +="public var "+field.getName()+":"+ftype+";\r\n";
							}
							messageEncode+=field.getNumber()+":[\""+field.getName()+"\","+field.getLabel().getNumber()+","+(field.hasTypeName()?getTypeName(field):field.getType().getNumber())+"],";
						}
					}
					if(as3){
						if(messageEncode.endsWith(",")){
							messageEncode=messageEncode.substring(0,messageEncode.length()-1);
						}
						messageEncode+="}";
						as3code +=hascode;
						as3code +="\r\npublic function "+messageType.getName()+"(){var pname:String = \""+pack+"::"+messageType.getName()+"\"; Message.messageEncode[pname] =Message.messageEncode[pname]||"+messageEncode+"}\r\n";
						as3code +="}}";
						String allpackcode="";
						for(String packcode:packs){
							allpackcode+="import "+packcode+";\r\n";
						}
						as3code = as3code.replace("$lzpack",allpackcode);
						builder.addFile(CodeGeneratorResponse.File.newBuilder()
								.setName(packPath+messageType.getName()+".as")
								.setContent(as3code)
						);
					}
				}
				for(DescriptorProtos.EnumDescriptorProto enumDescriptorProto:file.getEnumTypeList()){
					String code=header+codefrom+"package "+pack+"{\r\n";
					code+="public class "+enumDescriptorProto.getName()+" {\r\n";
					for(DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto:enumDescriptorProto.getValueList()){
						code+="public static const "+enumValueDescriptorProto.getName()+":int = "+enumValueDescriptorProto.getNumber()+";\r\n";
					}
					code+="}}";
					builder.addFile(CodeGeneratorResponse.File.newBuilder()
						.setName(packPath+enumDescriptorProto.getName()+".as")
						.setContent(code)
					);
				}
			}
			CodeGeneratorResponse response=builder.build();
			response.writeTo(System.out);
			System.out.flush();
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public String getType(FieldDescriptorProto field){
		if(field.getLabel()== FieldDescriptorProto.Label.LABEL_REPEATED){
			return "Array=[]/*"+field2type(field)+"*/";
		}
		return  field2type(field);
	}
	public String field2type(FieldDescriptorProto field){
		FieldDescriptorProto.Type type=field.getType();
		switch (type) {
			case TYPE_DOUBLE:
			case TYPE_FLOAT:
				return "Number";
			case TYPE_INT32:
			case TYPE_SFIXED32:
			case TYPE_SINT32:
			case TYPE_ENUM:
				return "int";
			case TYPE_UINT32:
			case TYPE_FIXED32:
				return "uint";
			case TYPE_BOOL:
				return "Boolean";
			case TYPE_INT64:
			case TYPE_SFIXED64:
			case TYPE_SINT64:
			case TYPE_UINT64:
			case TYPE_FIXED64:
				return "Int64";
			case TYPE_STRING:
				return "String";
			case TYPE_MESSAGE:
				return getTypeName(field);
			case TYPE_BYTES:
				packs.add("flash.utils.ByteArray");
				return "ByteArray";
		}
		return "*";
	}
	public String getTypeName(FieldDescriptorProto field){
		String ret=field.getTypeName().replaceFirst(".","");
		packs.add(ret);
		return trimTypeName(ret);
	}
	public String trimTypeName(String ret){
		int li=ret.lastIndexOf(".");
		if(li>=0){
			return ret.substring(li+1,ret.length());
		}
		return ret;
	}
}
